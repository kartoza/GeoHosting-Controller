version: '3.9'

volumes:
  database:
  static-data:

x-common-django:
  &default-common-django
  image: kartoza/${COMPOSE_PROJECT_NAME:-django_project}:${DJANGO_TAG:-1.0.0}
  env_file:
    - .env
  volumes:
    - static-data:/home/web/static
  restart: on-failure

services:
  redis:
    image: bitnami/redis:7.0.2
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}

  db:
    image: kartoza/postgis:16-3.4
    volumes:
      - database:/opt/postgres/data
    environment:
      - PGDATA=/opt/postgres/data
      - POSTGRES_DBNAME=${DATABASE_NAME:-django}
      - POSTGRES_USER=${DATABASE_USERNAME:-docker}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-docker}

  django:
    <<: *default-common-django
    command: 'uwsgi --ini /uwsgi.conf'
    links:
      - db
      - worker
      - minio
      - minio-create-bucket

  worker:
    <<: *default-common-django
    entrypoint: [ ]
    command: 'celery -A core worker --beat -l info  --scheduler django_celery_beat.schedulers:DatabaseScheduler'
    links:
      - db
      - redis
      - minio
      - minio-create-bucket

  nginx:
    image: nginx
    hostname: nginx
    links:
      - django

  minio:
    image: minio/minio
    command: minio server /data --console-address ":9001"
    ports:
      - "9005:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY:-minio_user}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_KEY:-minio_pass}
    volumes:
      - ./volumes/minio:/data
    restart: always

  minio-create-bucket:
    image: minio/mc
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY:-aws_access_key}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_KEY:-aws_secret_key}
      MINIO_HOST: ${AWS_HOST:-http://minio:9000/}
      MINIO_BUCKET_NAME: ${AWS_BUCKET_NAME:-dev}
    volumes:
      - ./minio/entrypoint.sh:/entrypoint.sh
    entrypoint: [ "/bin/sh", "/entrypoint.sh" ]
